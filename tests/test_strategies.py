from tests.custom_strategies import broadcastable_shape

from hypothesis import given
import hypothesis.strategies as st
import hypothesis.extra.numpy as hnp

import numpy as np

from typing import Tuple


@given(shape=hnp.array_shapes(), allow_singleton=st.booleans(),
       min_dim=st.integers(0, 6),
       min_side=st.integers(1, 6),
       data=st.data())
def test_broadcast_compat_shape(shape: Tuple[int, ...],
                                allow_singleton: bool,
                                min_dim: int,
                                min_side: int,
                                data: st.SearchStrategy):
    max_side = data.draw(st.integers(min_side, min_side + 5), label="max side")
    max_dim = data.draw(st.integers(min_dim, max(min_dim, len(shape)+3)), label="max dim")
    compat_shape = data.draw(broadcastable_shape(shape=shape, allow_singleton=allow_singleton,
                                                 min_dim=min_dim, max_dim=max_dim,
                                                 min_side=min_side, max_side=max_side),
                             label="broadcastable_shape")
    assert min_dim <= len(compat_shape) <= max_dim, \
        "a shape of inappropriate dimensionality was generated by the strategy"

    a = np.empty(shape)
    b = np.empty(compat_shape)
    np.broadcast(a, b)  # error if drawn shape for b is not broadcast-compatible

    if not allow_singleton:
        small_dim = min(a.ndim, b.ndim)
        if small_dim:
            assert shape[-small_dim:] == compat_shape[-small_dim:], \
                "singleton dimensions were included by the strategy"

    if len(compat_shape) > len(shape):
        n = len(compat_shape) - len(shape)
        for side in compat_shape[:n]:
            assert min_side <= side <= max_side, \
                "out-of-bound sides were generated by the strategy"

